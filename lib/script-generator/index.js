'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _generator = require('./lib/generator');

var _generator2 = _interopRequireDefault(_generator);

var _constants = require('./lib/constants');

var _constants2 = _interopRequireDefault(_constants);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _deepExtend = require('deep-extend');

var _deepExtend2 = _interopRequireDefault(_deepExtend);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var Spawn = function (_Generator) {
    _inherits(Spawn, _Generator);

    function Spawn(options, DEFAULTS) {
        _classCallCheck(this, Spawn);

        // this.options is set by a subclass when it initiallises
        var _this = _possibleConstructorReturn(this, (Spawn.__proto__ || Object.getPrototypeOf(Spawn)).call(this, options, DEFAULTS));

        _this.constants = _constants2.default;
        return _this;
    }

    /**
     * @function
     * @name slash
     * @description - Simply method to replace strings that have slashes that create octal string errors when trying to parse them as
     * a valid path to a file.
     * @param {[string]} [str] - The string to process
     * @returns {[string]} The original string or the manipulated string
     * @example 
     *      some\path\to\program files\
     * 
     * willl  be converted to:
     * 
     *      some/path/to/program files/
     */

    _createClass(Spawn, [{
        key: 'slash',
        value: function slash(str) {
            var isExtendedLengthPath = /^\\\\\?\\/.test(str);
            var hasNonAscii = /[^\x00-\x80]+/.test(str);
            if (isExtendedLengthPath || hasNonAscii) return str;
            return str.replace(/\\/g, '/');
        }

        /**
         * @function
         * @name getMsBuildScript
         * @description - A simple method to perform some checking before actually processing the 
         * build task. This will spawn a new process for the current inbound file, options can be specified
         * for each instance, you can spawn multiple msBuilds at once concurrently if your projects
         * don't have dependencies on each other.
         * @see lib/constants for the options available.
         * @param {[Object]} [file] - This should be a file object generated by file.parse('filename');
         * @param {[Object]} [options] - This is the options to send the msbuild task
         * @returns {[Promise]} A promise to handle for anything using the msbuilder, the resolve/reject will receive 
         * the inbound file object for the resolve an rejection,
         * and any errors as second argument in the rejection.
         */

    }, {
        key: 'getMsBuildScript',
        value: function getMsBuildScript(file, options) {
            var _this2 = this;

            var mergedOptions = JSON.parse(JSON.stringify((0, _deepExtend2.default)(this.constants.DEFAULTS, options)));
            // parse the input file to extract some information and santize
            file = _path2.default.parse(file);
            // create filename
            this.filename = _path2.default.join(file.dir, file.base);
            // generate method comes from
            this.command = this.generate(this.filename, mergedOptions);
            // return the object to the client
            return {
                args: this.command.args.map(function (arg) {
                    return _this2.slash(arg);
                }),
                executable: this.slash(this.command.executable)
            };
        }
    }]);

    return Spawn;
}(_generator2.default);

exports.default = Spawn;